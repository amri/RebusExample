<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rebus.AzureServiceBus</name>
    </assembly>
    <members>
        <member name="T:Rebus.AzureServiceBus.AsbStringExtensions">
            <summary>
            Nifty extensions for making working with <see cref="T:Rebus.AzureServiceBus.AzureServiceBusTransport"/> easier
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.AsbStringExtensions.ToValidAzureServiceBusEntityName(System.String)">
            <summary>
            Gets a valid topic name from the given topic string. This conversion is a one-way destructive conversion!
            </summary>
        </member>
        <member name="T:Rebus.AzureServiceBus.AzureServiceBusTransport">
            <summary>
            Implementation of <see cref="T:Rebus.Transport.ITransport"/> that uses Azure Service Bus queues to send/receive messages.
            </summary>
        </member>
        <member name="F:Rebus.AzureServiceBus.AzureServiceBusTransport.MagicSubscriptionPrefix">
            <summary>
            Subscriber "addresses" are prefixed with this bad boy so we can recognize it and publish to a topic client instead
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.AzureServiceBusTransport.#ctor(System.String,System.String,Rebus.Logging.IRebusLoggerFactory,Rebus.Threading.IAsyncTaskFactory)">
            <summary>
            Constructs the transport, connecting to the service bus pointed to by the connection string.
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.AzureServiceBusTransport.PurgeInputQueue">
            <summary>
            Purges the input queue by deleting it and creating it again
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.AzureServiceBusTransport.PrefetchMessages(System.Int32)">
            <summary>
            Configures the transport to prefetch the specified number of messages into an in-mem queue for processing, disabling automatic peek lock renewal
            </summary>
        </member>
        <member name="P:Rebus.AzureServiceBus.AzureServiceBusTransport.AutomaticallyRenewPeekLock">
            <summary>
            Enables automatic peek lock renewal - only recommended if you truly need to handle messages for a very long time
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.AzureServiceBusTransport.GetRetrier">
            <summary>
            Should return a new <see cref="T:Rebus.AzureServiceBus.Retrier"/>, fully configured to correctly "accept" the right exceptions
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.AzureServiceBusTransport.RegisterSubscriber(System.String,System.String)">
            <summary>
            Registers this endpoint as a subscriber by creating a subscription for the given topic, setting up
            auto-forwarding from that subscription to this endpoint's input queue
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.AzureServiceBusTransport.UnregisterSubscriber(System.String,System.String)">
            <summary>
            Unregisters this endpoint as a subscriber by deleting the subscription for the given topic
            </summary>
        </member>
        <member name="P:Rebus.AzureServiceBus.AzureServiceBusTransport.IsCentralized">
            <summary>
            Always returns true because Azure Service Bus topics and subscriptions are global
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.BasicAzureServiceBusTransport.#ctor(System.String,System.String,Rebus.Logging.IRebusLoggerFactory,Rebus.Threading.IAsyncTaskFactory)">
            <summary>
            Constructs the transport, connecting to the service bus pointed to by the connection string.
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.BasicAzureServiceBusTransport.PurgeInputQueue">
            <summary>
            Purges the input queue by deleting it and creating it again
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.BasicAzureServiceBusTransport.PrefetchMessages(System.Int32)">
            <summary>
            Configures the transport to prefetch the specified number of messages into an in-mem queue for processing, disabling automatic peek lock renewal
            </summary>
        </member>
        <member name="P:Rebus.AzureServiceBus.BasicAzureServiceBusTransport.AutomaticallyRenewPeekLock">
            <summary>
            Enables automatic peek lock renewal - only recommended if you truly need to handle messages for a very long time
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.BasicAzureServiceBusTransport.GetRetrier">
            <summary>
            Should return a new <see cref="T:Rebus.AzureServiceBus.Retrier"/>, fully configured to correctly "accept" the right exceptions
            </summary>
        </member>
        <member name="T:Rebus.AzureServiceBus.Config.AzureServiceBusMode">
            <summary>
            Represents the two supported modes of using Azure Service Bus
            </summary>
        </member>
        <member name="F:Rebus.AzureServiceBus.Config.AzureServiceBusMode.Standard">
            <summary>
            In standard mode, the Azure Service Bus transport will use ASB topics to do pub/sub
            </summary>
        </member>
        <member name="F:Rebus.AzureServiceBus.Config.AzureServiceBusMode.Basic">
            <summary>
            In basic mode, only ASB queues are necessary
            </summary>
        </member>
        <member name="T:Rebus.AzureServiceBus.Retrier">
            <summary>
            Retry helper that can be configured to accept certain exceptions (by specifying a function that returns whether the given
            exception is OK)
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.Retrier.#ctor(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Constructs the retrier, using the specified intervals between attempts
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.Retrier.On``1(System.Func{``0,System.Boolean})">
            <summary>
            Sets up a function to check exceptions of type <typeparamref name="TException"/>, checking the caught
            exception with the acceptor function <paramref name="exceptionAcceptor"/>
            </summary>
        </member>
        <member name="M:Rebus.AzureServiceBus.Retrier.Execute(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the specified function, retrying if necessary
            </summary>
        </member>
        <member name="T:Rebus.Config.AzureServiceBusConfigurationExtensions">
            <summary>
            Configuration extensions for the Azure Service Bus transport
            </summary>
        </member>
        <member name="M:Rebus.Config.AzureServiceBusConfigurationExtensions.UseAzureServiceBusAsOneWayClient(Rebus.Config.StandardConfigurer{Rebus.Transport.ITransport},System.String,Rebus.AzureServiceBus.Config.AzureServiceBusMode)">
            <summary>
            Configures Rebus to use Azure Service Bus to transport messages as a one-way client (i.e. will not be able to receive any messages)
            </summary>
        </member>
        <member name="M:Rebus.Config.AzureServiceBusConfigurationExtensions.UseAzureServiceBus(Rebus.Config.StandardConfigurer{Rebus.Transport.ITransport},System.String,System.String,Rebus.AzureServiceBus.Config.AzureServiceBusMode)">
            <summary>
            Configures Rebus to use Azure Service Bus queues to transport messages, connecting to the service bus instance pointed to by the connection string
            (or the connection string with the specified name from the current app.config)
            </summary>
        </member>
        <member name="T:Rebus.Config.AzureServiceBusTransportSettings">
            <summary>
            Allows for configuring additional options for the Azure Service Bus transport
            </summary>
        </member>
        <member name="M:Rebus.Config.AzureServiceBusTransportSettings.EnablePartitioning">
            <summary>
            Enables partitioning whereby Azure Service Bus will be able to distribute messages between message stores
            and this way increase throughput. Enabling partitioning only has an effect on newly created queues.
            </summary>
        </member>
        <member name="M:Rebus.Config.AzureServiceBusTransportSettings.EnablePrefetching(System.Int32)">
            <summary>
            Enables prefetching whereby a batch of messages will be prefetched instead of only one at a time.
            By enabling prefetching, the automatic peek lock renewal will be disabled, because it is assumed
            that prefetching will be enabled only in cases where messages can be processed fairly quickly.
            </summary>
        </member>
        <member name="M:Rebus.Config.AzureServiceBusTransportSettings.AutomaticallyRenewPeekLock">
            <summary>
            Enables automatic peek lock renewal. Only enable this if you intend on handling messages for a long long time, and
            DON'T intend on handling messages quickly - it will have an impact on message receive, so only enable it if you
            need it. You should usually strive after keeping message processing times low, much lower than the 5 minute lease
            you get with Azure Service Bus.
            </summary>
        </member>
    </members>
</doc>
